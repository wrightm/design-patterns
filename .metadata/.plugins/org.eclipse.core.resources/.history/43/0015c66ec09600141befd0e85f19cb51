Strategy:

Used to encapsulate different object behaviours and allows them to be easily interchangeable by assigning responsibility to an object to decide when to use a particular behaviour.

Advantages:

* Separates code that changes from code that stays the same. Example, A Dancer Class, we could pull out dance moves as a behavior.
* Flexible by having the base behaviour as an interface. Can change type at runtime. Example, DanceBehaviour -> HandDanceBehaviour or DanceBehaviour -> LegDanceBehaviour.
* Code reuse, not only the dance class can use the DanceBehaviour interface. A normal Human could too.
* Modify, we can modify new behaviours without touching or effecting old code.
* Dynamically change behaviour at run time.
* Eliminates or decreases the amount of conditional statements. (initialising the behaviour for that object).
* Can have a choice of different implementations of the same behaviour. These can have different advantage for different running conditions.

Disadvantages:

* Many related classes whose only difference is there algorithms behaviour. This separation can add to code base complexity due to separation.
* Clients must understand the different behaviours before using them. Implementation isnt built into desired class.
* Bigger code base could lead to greater maintenance overheads.