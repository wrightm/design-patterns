The Command design pattern encapsulates commands (method calls) in objects allowing us to issue requests without knowing the requested operation or the requesting object.
Command design pattern provides the options to queue commands, undo/redo actions and other manipulations.

Intent

- encapsulate a request in an object
- allows the parameterization of clients with different requests
- allows saving the requests in a queue

Client invoker <- Command
  |                  |
  ^                  ^
  Reciever <- ConcreteCommand   execute() {
                  					reciever.action();
                  				}
                  				
The classes participating in the pattern are:
- Command - declares an interface for executing an operation;
- ConcreteCommand - extends the Command interface, implementing the Execute method by invoking the corresponding operations on Receiver. It defines a link between the Receiver and the action.
- Client - creates a ConcreteCommand object and sets its receiver;
- Invoker - asks the command to carry out the request;
- Receiver - knows how to perform the operations;

The Client asks for a command to be executed. 
The Invoker takes the command, encapsulates it and places it in a queue, 
in case there is something else to do first, 
and the ConcreteCommand that is in charge of the requested command, 
sending its result to the Receiver.